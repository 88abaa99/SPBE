#  *********************************************************************************************************************
#  Copyright (c) 2022-2023 by THALES
#  All rights reserved.
#  SIX Background Intellectual Property (69333045)
#  ---------------------------------------------------------------------------------------------------------------------
#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
#  following conditions are met:
#  * Redistributions of source code must retain the present copyright notice, this list of conditions and the following
#  disclaimer.
#  * Redistributions in binary form must reproduce the present copyright notice, this list of conditions and the
#  following disclaimer in the documentation and/or other materials provided with the distribution.
#  * Neither the name of THALES nor the names of its contributors may be used to endorse or promote products derived
#  from this software without specific prior written permission.
#  ---------------------------------------------------------------------------------------------------------------------
#  PART OF THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND SHALL REMAIN SUBJECT
#  TO THEIR APPLICABLE TERMS AND CONDITIONS OF LICENCE. ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
#  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
#  SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#  ---------------------------------------------------------------------------------------------------------------------
#  SCR Python Cryptographic Library (SPCL)
#  File : SP800_108_Feedback_HMAC_SHA256_autotest.py
#  Classification : OPEN
#  *********************************************************************************************************************

from py_public.ModeI.HMAC import HMAC
from py_public.KDF.SP800_108 import CAVPFixedInfo
from py_public.KDF.SP800_108_Feedback import SP800_108_Feedback
from py_public.HashFunction.HashFunction_hashlib import SHA256
from py_public.Toolbox.ByteArrayTools import *

algo = HMAC(SHA256())

kdf = SP800_108_Feedback(algo, 8, fixedInfo=CAVPFixedInfo)

key = bytes([0x35, 0x73, 0x60, 0x3c, 0x28, 0x61, 0xdb, 0x4a, 0x47, 0x0e, 0x16, 0x05, 0x49, 0xa3, 0xcd, 0x3f,
             0x6e, 0x6f, 0x97, 0x13, 0x5d, 0xb4, 0x6b, 0x8a, 0xd5, 0xa1, 0xbd, 0xe3, 0xbf, 0x2c, 0x9a, 0x24])
iv = bytes([0x9d, 0x94, 0x58, 0xee, 0x15, 0x48, 0x50, 0x62, 0xaf, 0x41, 0x70, 0xce, 0xe0, 0xaa, 0xe7, 0xcb,
            0x17, 0x64, 0x6c, 0x9e, 0x65, 0xda, 0x8a, 0x5c, 0x51, 0x7d, 0x89, 0x9e, 0xd0, 0xc2, 0x8f, 0x9e])
fixedInfo = bytes([0xd5, 0x3a, 0x87, 0x3f, 0x1e, 0x59, 0x57, 0x8d, 0xa1, 0xa2, 0xe3, 0xd0, 0x76, 0x14, 0x69, 0x61,
                   0x3f, 0xf7, 0x90, 0x0a, 0x17, 0x94, 0x56, 0x88, 0xdf, 0x7b, 0x14, 0x16, 0x42, 0x7c, 0x4f, 0xa0,
                   0xe8, 0xee, 0x70, 0x9c, 0x72, 0x32, 0x83, 0xeb, 0xa6, 0xb7, 0x56, 0xd3, 0xcd, 0x10, 0x5e, 0x9d,
                   0x3e, 0xf3, 0x19])
expectedOutput = bytes([0xff, 0x70, 0x03, 0xf0, 0x96, 0x3d, 0x3f, 0x87, 0xa9, 0x3d, 0x50, 0x11, 0xd5, 0xf6, 0x1e, 0x5d,
                        0xa1, 0xf1, 0x11, 0x04, 0x69, 0x81, 0x8a, 0x25, 0x58, 0x6a, 0xe2, 0xe8, 0x0b, 0xbb, 0xad, 0x06,
                        0x5c, 0xee, 0xe3, 0xc8, 0x1d, 0xdb, 0xac, 0x41, 0xbf, 0xf6, 0x70, 0xe7, 0x87, 0x77, 0x7b, 0xdb,
                        0xb4, 0x83, 0x85, 0x11, 0x96, 0x08, 0x56, 0x00, 0xd3, 0x6d, 0xb3, 0x9b, 0xcf, 0x54, 0x4e, 0xd0,
                        0x07, 0x32, 0x3d, 0x0a, 0x2b, 0x4d, 0x35, 0x7d, 0x4f, 0xe0, 0xa3, 0x2b, 0xa7, 0xed, 0xd3, 0xaf,
                        0x78, 0x8b, 0x85, 0x77, 0xcc, 0x61, 0x87, 0x13, 0x72, 0xca, 0x95, 0xe4, 0xd5, 0x7d, 0xc9, 0xd9,
                        0xfa, 0xb3, 0xc0, 0x28, 0xb4, 0x36, 0x29, 0xde, 0x91, 0x2c, 0x89, 0x75, 0x1c, 0x18, 0x10, 0x02,
                        0xd2, 0xae, 0x44, 0x46, 0x37, 0x42, 0xb2, 0xf3, 0xf3, 0x41, 0x84, 0xa8, 0xb6, 0x1b, 0xea, 0xfd,
                        0x61, 0x3a, 0x10, 0x0b, 0x8b, 0x5a, 0x99, 0x7a, 0xce, 0xe5, 0x1c, 0x45, 0x50, 0xca, 0x44, 0x3b,
                        0x1d, 0x91, 0x09, 0x8f, 0xf7, 0xf3, 0x43, 0xeb, 0x9c, 0x8c, 0x81, 0x54, 0x71, 0x4d, 0xc8, 0x36,
                        0x85, 0x97, 0xc5, 0xf7, 0x1c, 0x62, 0xa4, 0xb4, 0xcb, 0xea, 0xc1, 0x82, 0xbc, 0xd7, 0xb3, 0xdc,
                        0xd2, 0xd2, 0xa8, 0x99, 0xb0, 0x80, 0x3c, 0xf7, 0xbf, 0xe7, 0x02, 0xc6, 0x14, 0xc6, 0xc6, 0x6e,
                        0xda, 0xb1, 0xf9, 0xfd, 0xd4, 0x8b, 0x49, 0x03, 0xc0, 0x7c, 0x2e, 0x1d, 0x2a, 0x8b, 0xbc, 0xd1,
                        0xe1, 0x39, 0x66, 0x40, 0x73, 0x2d, 0xfa, 0x28, 0x5a, 0x89, 0xb5, 0x49, 0x29, 0xa7, 0xf5, 0x15,
                        0xef, 0x05, 0x64, 0x0a, 0x07, 0x6f, 0xaa, 0x51, 0xef, 0xc8, 0x06, 0x77, 0x43, 0x9b, 0x3d, 0xd7,
                        0x44, 0xdc, 0x17, 0x4c, 0x6a, 0x7d, 0x18, 0x99, 0x8f, 0x60, 0xf3, 0xa7, 0xc4, 0x4e, 0xb7, 0x9a])

kdf.setKey(key)
kdf.init(totalOutputSizeT1=2048, label=fixedInfo, iv=iv)
res = kdf.update(8)
res += kdf.update(32)
res += kdf.update(256)
res += kdf.update(2048 - 256 - 32 - 8)
kdf.final()

if res != expectedOutput:
    raise Exception("Autotest SP800_108_Feedback HMAC-SHA256 : erreur vecteur NIST (mode flux)")

res2 = kdf.oneShot(key=key, totalOutputSizeT1=2048, label=fixedInfo, iv=iv)

if res2 != expectedOutput:
    raise Exception("Autotest SP800_108_Feedback HMAC-SHA256 : erreur vecteur NIST (mode one-shot)")
