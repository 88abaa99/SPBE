#  *********************************************************************************************************************
#  Copyright (c) 2022-2023 by THALES
#  All rights reserved.
#  SIX Background Intellectual Property (69333045)
#  ---------------------------------------------------------------------------------------------------------------------
#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
#  following conditions are met:
#  * Redistributions of source code must retain the present copyright notice, this list of conditions and the following
#  disclaimer.
#  * Redistributions in binary form must reproduce the present copyright notice, this list of conditions and the
#  following disclaimer in the documentation and/or other materials provided with the distribution.
#  * Neither the name of THALES nor the names of its contributors may be used to endorse or promote products derived
#  from this software without specific prior written permission.
#  ---------------------------------------------------------------------------------------------------------------------
#  PART OF THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND SHALL REMAIN SUBJECT
#  TO THEIR APPLICABLE TERMS AND CONDITIONS OF LICENCE. ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
#  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
#  SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#  ---------------------------------------------------------------------------------------------------------------------
#  SCR Python Cryptographic Library (SPCL)
#  File : SHA256_autotest.py
#  Classification : OPEN
#  *********************************************************************************************************************

from py_public.HashFunction.SHA256 import SHA256


"""
Partie 1 : Vecteurs de tests du CAVP NIST long messages SHA256, taille en bits du message, modulo 8, egale 0
"""

hashFunction = SHA256()

message = bytes(
    [0x45, 0x11, 0x01, 0x25, 0x0e, 0xc6, 0xf2, 0x66, 0x52, 0x24, 0x9d, 0x59, 0xdc, 0x97, 0x4b, 0x73,
     0x61, 0xd5, 0x71, 0xa8, 0x10, 0x1c, 0xdf, 0xd3, 0x6a, 0xba, 0x3b, 0x58, 0x54, 0xd3, 0xae, 0x08,
     0x6b, 0x5f, 0xdd, 0x45, 0x97, 0x72, 0x1b, 0x66, 0xe3, 0xc0, 0xdc, 0x5d, 0x8c, 0x60, 0x6d, 0x96,
     0x57, 0xd0, 0xe3, 0x23, 0x28, 0x3a, 0x52, 0x17, 0xd1, 0xf5, 0x3f, 0x2f, 0x28, 0x4f, 0x57, 0xb8,
     0x5c, 0x8a, 0x61, 0xac, 0x89, 0x24, 0x71, 0x1f, 0x89, 0x5c, 0x5e, 0xd9, 0x0e, 0xf1, 0x77, 0x45,
     0xed, 0x2d, 0x72, 0x8a, 0xbd, 0x22, 0xa5, 0xf7, 0xa1, 0x34, 0x79, 0xa4, 0x62, 0xd7, 0x1b, 0x56,
     0xc1, 0x9a, 0x74, 0xa4, 0x0b, 0x65, 0x5c, 0x58, 0xed, 0xfe, 0x0a, 0x18, 0x8a, 0xd2, 0xcf, 0x46,
     0xcb, 0xf3, 0x05, 0x24, 0xf6, 0x5d, 0x42, 0x3c, 0x83, 0x7d, 0xd1, 0xff, 0x2b, 0xf4, 0x62, 0xac,
     0x41, 0x98, 0x00, 0x73, 0x45, 0xbb, 0x44, 0xdb, 0xb7, 0xb1, 0xc8, 0x61, 0x29, 0x8c, 0xdf, 0x61,
     0x98, 0x2a, 0x83, 0x3a, 0xfc, 0x72, 0x8f, 0xae, 0x1e, 0xda, 0x2f, 0x87, 0xaa, 0x2c, 0x94, 0x80,
     0x85, 0x8b, 0xec])

expectedDigest = bytes(
    [0x3c, 0x59, 0x3a, 0xa5, 0x39, 0xfd, 0xcd, 0xae, 0x51, 0x6c, 0xdf, 0x2f, 0x15, 0x00, 0x0f, 0x66,
     0x34, 0x18, 0x5c, 0x88, 0xf5, 0x05, 0xb3, 0x97, 0x75, 0xfb, 0x9a, 0xb1, 0x37, 0xa1, 0x0a, 0xa2])


digest = hashFunction.oneShot(message)

if digest != expectedDigest:
    raise Exception("Autotest SHA256 : erreur vecteur CAVP NIST long messages -> taille en bits du message, modulo 8, "
                    "egale à 0 (one-shot)")

"""
Partie 2 : Vecteurs de tests du CAVP NIST long messages SHA256, taille en bits du message, modulo 8, egale 0
"""

hashFunction.init()
hashFunction.update(bytes([0X45, 0X10]), 15)
hashFunction.update(bytes([0X80]), 1)
hashFunction.update(message[2:len(message)])
digest = hashFunction.final()
if digest != expectedDigest:
    raise Exception("Autotest SHA256 : erreur vecteur CAVP NIST long messages -> taille en bits du message, modulo 8, "
                    "égale 0 (init/update/final)")


"""
Partie 3 : Vecteurs de tests du CAVP NIST SHA256 short messages, taille en bits du message, modulo 8, différente de 0
"""

digest = hashFunction.oneShot(bytes([0x40]), 6)
expectedDigest = bytes([
                 0x5e, 0xf0, 0x22, 0x4f, 0x79, 0x73, 0x7b, 0xda, 0x30, 0x56, 0x28, 0x31, 0x15, 0x21, 0x84, 0xb9,
                 0x39, 0xcc, 0x43, 0xfc, 0xd4, 0x0d, 0x09, 0xf4, 0x94, 0x5e, 0x08, 0x1a, 0x39, 0xc6, 0xd5, 0x42])

if digest != expectedDigest:
    raise Exception("Autotest SHA256 : erreur vecteur CAVP NIST short messages-> taille en bits du message, modulo 8, différente de "
                    "0 (one-shot)")

message = bytes([
                 0x4d, 0xe3, 0xca, 0x0f, 0x86, 0xb9, 0x07, 0x5b, 0xda, 0x56, 0xa5, 0x65, 0x52, 0x72, 0x09, 0x4c,
                 0x9c, 0xce, 0x83, 0x73, 0xa6, 0x75, 0x81, 0xe0, 0x6c, 0x42, 0x03, 0xe2, 0x0e, 0xa2, 0x4f, 0xf7,
                 0x25, 0x9b, 0xe6, 0xec, 0x57, 0x0e, 0xb6, 0x46, 0x29, 0x39, 0x91, 0xe1, 0x15, 0x7f, 0xde, 0xd7,
                 0xdd, 0x6c, 0x8f, 0xa3, 0x1e, 0xf4, 0x53, 0x87, 0x28, 0xfb, 0x0c, 0x2b, 0x0d, 0x1b, 0x83, 0x86])

expectedDigest = bytes([
                 0xdb, 0x59, 0x1c, 0x08, 0x8d, 0xe9, 0xd7, 0xfe, 0x8c, 0x4a, 0xda, 0xe4, 0x5e, 0xa8, 0x45, 0xb2,
                 0xc9, 0xdf, 0x1c, 0x5b, 0x38, 0x6a, 0xaf, 0xe7, 0x02, 0xb0, 0xb8, 0x40, 0x67, 0xba, 0x9f, 0x69])

hashFunction.init()
hashFunction.update(message[:60])
hashFunction.update(message[60:], 31)
digest = hashFunction.final()

if digest != expectedDigest:
    raise Exception("Autotest SHA256 : erreur vecteur CAVP NIST short messages-> taille en bits du message, modulo 8, differente de "
                    "0 (init/update/final)")

