#  *********************************************************************************************************************
#  Copyright (c) 2022-2023 by THALES
#  All rights reserved.
#  SIX Background Intellectual Property (69333045)
#  ---------------------------------------------------------------------------------------------------------------------
#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
#  following conditions are met:
#  * Redistributions of source code must retain the present copyright notice, this list of conditions and the following
#  disclaimer.
#  * Redistributions in binary form must reproduce the present copyright notice, this list of conditions and the
#  following disclaimer in the documentation and/or other materials provided with the distribution.
#  * Neither the name of THALES nor the names of its contributors may be used to endorse or promote products derived
#  from this software without specific prior written permission.
#  ---------------------------------------------------------------------------------------------------------------------
#  PART OF THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND SHALL REMAIN SUBJECT
#  TO THEIR APPLICABLE TERMS AND CONDITIONS OF LICENCE. ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
#  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
#  SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#  ---------------------------------------------------------------------------------------------------------------------
#  SCR Python Cryptographic Library (SPCL)
#  File : HashFunction_hashlib_autotest.py
#  Classification : OPEN
#  *********************************************************************************************************************

from py_public.HashFunction.HashFunction_hashlib import SHA256, SHA512, SHAKE256_256


"""
Partie 1 : Vecteurs de tests du NIST SHA256
"""

hashFunction = SHA256()

message = bytes(
    [0x6b, 0x91, 0x8f, 0xb1, 0xa5, 0xad, 0x1f, 0x9c, 0x5e, 0x5d, 0xbd, 0xf1, 0x0a, 0x93, 0xa9, 0xc8,
        0xf6, 0xbc, 0xa8, 0x9f, 0x37, 0xe7, 0x9c, 0x9f, 0xe1, 0x2a, 0x57, 0x22, 0x79, 0x41, 0xb1, 0x73,
        0xac, 0x79, 0xd8, 0xd4, 0x40, 0xcd, 0xe8, 0xc6, 0x4c, 0x4e, 0xbc, 0x84, 0xa4, 0xc8, 0x03, 0xd1,
        0x98, 0xa2, 0x96, 0xf3, 0xde, 0x06, 0x09, 0x00, 0xcc, 0x42, 0x7f, 0x58, 0xca, 0x6e, 0xc3, 0x73,
        0x08, 0x4f, 0x95, 0xdd, 0x6c, 0x7c, 0x42, 0x7e, 0xcf, 0xbf, 0x78, 0x1f, 0x68, 0xbe, 0x57, 0x2a,
        0x88, 0xdb, 0xcb, 0xb1, 0x88, 0x58, 0x1a, 0xb2, 0x00, 0xbf, 0xb9, 0x9a, 0x3a, 0x81, 0x64, 0x07,
        0xe7, 0xdd, 0x6d, 0xd2, 0x10, 0x03, 0x55, 0x4d, 0x4f, 0x7a, 0x99, 0xc9, 0x3e, 0xbf, 0xce, 0x5c,
        0x30, 0x2f, 0xf0, 0xe1, 0x1f, 0x26, 0xf8, 0x3f, 0xe6, 0x69, 0xac, 0xef, 0xb0, 0xc1, 0xbb, 0xb8,
        0xb1, 0xe9, 0x09, 0xbd, 0x14, 0xaa, 0x48, 0xba, 0x34, 0x45, 0xc8, 0x8b, 0x0e, 0x11, 0x90, 0xee,
        0xf7, 0x65, 0xad, 0x89, 0x8a, 0xb8, 0xca, 0x2f, 0xe5, 0x07, 0x01, 0x5f, 0x15, 0x78, 0xf1, 0x0d,
        0xce, 0x3c, 0x11, 0xa5, 0x5f, 0xb9, 0x43, 0x4e, 0xe6, 0xe9, 0xad, 0x6c, 0xc0, 0xfd, 0xc4, 0x68,
        0x44, 0x47, 0xa9, 0xb3, 0xb1, 0x56, 0xb9, 0x08, 0x64, 0x63, 0x60, 0xf2, 0x4f, 0xec, 0x2d, 0x8f,
        0xa6, 0x9e, 0x2c, 0x93, 0xdb, 0x78, 0x70, 0x8f, 0xcd, 0x2e, 0xef, 0x74, 0x3d, 0xcb, 0x93, 0x53,
        0x81, 0x9b, 0x8d, 0x66, 0x7c, 0x48, 0xed, 0x54, 0xcd, 0x43, 0x6f, 0xb1, 0x47, 0x65, 0x98, 0xc4,
        0xa1, 0xd7, 0x02, 0x8e, 0x6f, 0x2f, 0xf5, 0x07, 0x51, 0xdb, 0x36, 0xab, 0x6b, 0xc3, 0x24, 0x35,
        0x15, 0x2a, 0x00, 0xab, 0xd3, 0xd5, 0x8d, 0x9a, 0x87, 0x70, 0xd9, 0xa3, 0xe5, 0x2d, 0x5a, 0x36,
        0x28, 0xae, 0x3c, 0x9e, 0x03, 0x25])

expectedDigest = bytes(
    [0x46, 0x50, 0x0b, 0x6a, 0xe1, 0xab, 0x40, 0xbd, 0xe0, 0x97, 0xef, 0x16, 0x8b, 0x0f, 0x31, 0x99,
    0x04, 0x9b, 0x55, 0x54, 0x5a, 0x15, 0x88, 0x79, 0x2d, 0x39, 0xd5, 0x94, 0xf4, 0x93, 0xdc, 0xa7])

digest = hashFunction.oneShot(message)

if digest != expectedDigest:
    raise Exception("Autotest SHA256 (hashlib) : erreur vecteur NIST (one-shot)")
    
hashFunction.init()
hashFunction.update(message[:4])
hashFunction.update(message[4:58])
hashFunction.update(message[58:])
digest = hashFunction.final()


if digest != expectedDigest:
    raise Exception("Autotest SHA256 (hashlib) : erreur vecteur NIST (init/update/final)")
    
"""
Partie 2 : Vecteurs de tests du NIST SHA512
"""

hashFunction = SHA512()

message = bytes(
    [0x4f, 0x7a, 0x56, 0x18, 0x87, 0x09, 0x45, 0xb8, 0x9f, 0x19, 0x4e, 0x31, 0xb1, 0xaa, 0x80, 0x2c,
     0x53, 0x50, 0x32, 0x6d, 0xc6, 0x91, 0xdf, 0x58, 0x70, 0x8e, 0x34, 0xb4, 0x8c, 0xe6, 0x66, 0xb0,
     0x21, 0xd7, 0xc9, 0x23, 0x30, 0xa6, 0x9f, 0x18, 0x32, 0x41, 0x2d, 0x8a, 0xc2, 0x24, 0x15, 0x6c,
     0x96, 0x79, 0xdf, 0xed, 0xb3, 0x83, 0xd9, 0xf9, 0xe1, 0x3c, 0x21, 0x03, 0x5d, 0x3d, 0x00, 0x02,
     0xcf, 0xdf, 0x79, 0xb9, 0x7b, 0xa0, 0x22, 0x3c, 0xbb, 0xc8, 0x33, 0xb0, 0xad, 0x4c, 0xdd, 0x52,
     0x29, 0xf2, 0xdd, 0xbb, 0xf6, 0xb6, 0x50, 0x62, 0x3d, 0x6c, 0xc9, 0x62, 0x3d, 0xa8, 0xa1, 0x7d,
     0x41, 0xdb, 0x8e, 0x61, 0xcf, 0xbe, 0x77, 0x2b, 0x23, 0xf4, 0x87, 0x2a, 0xdc, 0xeb, 0x81, 0xe5,
     0xf4, 0x03, 0x53, 0x5f, 0xf5, 0xf2, 0xed, 0x99, 0x6a, 0x67, 0x53, 0x59, 0x94, 0xed, 0xf1, 0x2a,
     0x5f, 0x12, 0x30, 0xa4, 0x94, 0xc9, 0x46, 0xed, 0x50, 0x0e, 0x52, 0x80, 0xb5, 0xc8, 0xa8, 0x2d,
     0xdf, 0xf3, 0x69, 0x61, 0x1a, 0xfe, 0x58, 0xa8, 0x52, 0x72, 0xe8, 0x70, 0xcb, 0xd5, 0x9a, 0x10,
     0x12, 0xce, 0x85, 0x09, 0x33, 0x8a, 0x36, 0x8b, 0x2c, 0x5d, 0xbb, 0x3b, 0xa2, 0xad, 0xfb, 0x33,
     0xd3, 0x0c, 0x49, 0x4a, 0xcc, 0xa4, 0x38, 0x96, 0xdb, 0xd8, 0xb0, 0x30, 0x48, 0x28, 0x41, 0x37,
     0x40, 0x55, 0xb8, 0x18, 0x12, 0xc6, 0xf0, 0x0c, 0x9e, 0x2b, 0xeb, 0xe2, 0x09, 0x60, 0x21, 0xfe,
     0xb6, 0x94, 0x18, 0xa2, 0x72, 0xaa, 0x35, 0x6c, 0xef, 0xdf, 0xd2, 0x20, 0x74, 0xae, 0x91, 0xa8,
     0xd2, 0xf1, 0xef, 0x59, 0x9a, 0x48, 0x1c, 0x78, 0x8d, 0xbe, 0x0a, 0xfd, 0x54, 0xaa, 0xc3, 0x96,
     0x72, 0xd4, 0x01, 0xef, 0x76, 0xd9, 0xf8, 0x31, 0x75, 0xd1, 0x77, 0xc9, 0xb7, 0x2e, 0x2f, 0x6a,
     0xb1, 0xe7, 0x52, 0x55, 0x33, 0xd7, 0x61, 0xd8, 0xe3, 0x60, 0x3f, 0x14, 0xea, 0x53, 0x89, 0x04,
     0xed, 0x14, 0x2a, 0xbb, 0x3f, 0xf9, 0x29, 0xed, 0x55, 0xf4, 0xc6, 0xb1, 0x7a, 0x72, 0xc6, 0x85,
     0xc3, 0x82, 0x0b, 0x93, 0x46, 0x3a, 0x67, 0x33, 0x87, 0x56, 0xb2, 0xb0, 0x33, 0x23, 0x1a, 0x4f,
     0x11, 0x9c, 0xbb, 0x8d, 0x35, 0xd2, 0x70, 0xa9, 0x77, 0x91, 0xe8, 0x62, 0x23, 0x40, 0xfc, 0x02,
     0xf2, 0x09, 0x3f, 0x9b, 0x39, 0x3a, 0xd7, 0x91, 0x61, 0xeb, 0x8c, 0x58, 0x97, 0xe2, 0x1f, 0x7f,
     0xc4, 0xb3, 0xdd, 0xee, 0xc0, 0x2b, 0x73, 0x6c, 0xc3, 0xef, 0x04, 0x64, 0x1c, 0x61, 0x79, 0xe8,
     0x25, 0xc3, 0x19, 0xf6, 0x76, 0x9f, 0x59, 0xfa, 0x59, 0x66, 0xf5, 0x95, 0x7e, 0x57, 0x3f, 0x9d,
     0xf0, 0xa2, 0xb7, 0x65, 0x48, 0xce, 0xdd, 0x3e, 0x21, 0x58, 0x43, 0x3d, 0xcb, 0x9d, 0xe6, 0x3f,
     0x44, 0xf9, 0xbe, 0x2b, 0x63, 0x31, 0x94, 0x77, 0x57, 0x0e, 0x14, 0xee, 0x50, 0x4b, 0x23, 0xb0,
     0x7c, 0xb2, 0x73, 0x7a, 0x35, 0x81, 0x54, 0x27, 0x79, 0x12, 0xcd, 0x77, 0x9a, 0xbb, 0xeb, 0x10,
     0x36, 0xf4, 0x59, 0xc2, 0x6a, 0xb7, 0x31, 0x0f, 0x43])

expectedDigest = bytes(
    [0x71, 0x3d, 0x5c, 0x26, 0xde, 0x17, 0xe1, 0x44, 0x0a, 0x36, 0xaa, 0xb9, 0x3f, 0x7c, 0xd8, 0x11,
     0x1c, 0xd6, 0x2f, 0xd8, 0xbe, 0xa5, 0x09, 0x9b, 0x2b, 0x6b, 0xf9, 0x3e, 0x47, 0x0e, 0x1e, 0xae,
     0xab, 0x8b, 0x92, 0x5c, 0x64, 0x6e, 0x9e, 0x67, 0xce, 0x01, 0xb0, 0x3b, 0x33, 0xd2, 0xb5, 0x00,
     0xb9, 0x40, 0x0e, 0x59, 0xf0, 0xec, 0xdf, 0xb0, 0x0d, 0xd7, 0xdd, 0xcd, 0x23, 0x0c, 0xc8, 0x37])

digest = hashFunction.oneShot(message)

if digest != expectedDigest:
    raise Exception("Autotest SHA512 (hashlib) : erreur vecteur NIST (one-shot)")
    
hashFunction.init()
hashFunction.update(message[:4])
hashFunction.update(message[4:58])
hashFunction.update(message[58:160])
hashFunction.update(message[160:172])
hashFunction.update(message[172:])
digest = hashFunction.final()

if digest != expectedDigest:
    raise Exception("Autotest SHA512 (hashlib) : erreur vecteur NIST (init/update/final)")

"""
Partie 3 : Vecteurs de tests du NIST SHAKE256_256
"""

hashFunction = SHAKE256_256()

message = bytes(
    [0x3b, 0x79, 0xda, 0x98, 0x2a, 0xc5, 0xf2, 0xa0, 0x64, 0x63, 0x74, 0x47, 0x28, 0x26, 0x36, 0x1c,
     0x9d, 0x2d, 0x2e, 0x48, 0x14, 0x14, 0xdb, 0x67, 0x8e, 0x67, 0xe0, 0x96, 0x7e, 0x5c, 0xf3, 0xcd,
     0xd0, 0xc1, 0xf5, 0x70, 0x29, 0x33, 0x62, 0x20, 0x71, 0x91, 0xec, 0xd7, 0x8f, 0xb0, 0x63, 0x34,
     0x73, 0x50, 0xd8, 0x13, 0x5a, 0x4f, 0x02, 0x61, 0x4d, 0x1d, 0xe1, 0x2f, 0xeb, 0x70, 0xa0, 0x04,
     0x69, 0x39, 0xc0, 0x78, 0xd7, 0xd6, 0x73, 0xfe, 0xa5, 0x89, 0x46, 0x02, 0x65, 0x29, 0x03, 0x34,
     0xd2, 0x17, 0xd6, 0x23, 0x12, 0x74, 0xae, 0x0d, 0x38, 0x91, 0xe6, 0xf5, 0x0d, 0xa7, 0x25, 0xf7,
     0x10, 0xc9, 0x83, 0xd9, 0xbb, 0x16, 0xed, 0xe2, 0x08, 0x33, 0xca, 0xef, 0x34, 0xf9, 0xde, 0xc3,
     0xc3, 0x6a, 0x6f, 0x9f, 0xc4, 0xea, 0xa7, 0x12, 0x56, 0xac, 0x3a, 0x13, 0x6b, 0x6a, 0x49, 0x4d,
     0xcc, 0x59, 0x85, 0xba, 0x5e, 0x5c, 0x97, 0x73, 0xa3, 0x77, 0xc0, 0xc7, 0x83, 0x87, 0xbc, 0x8a,
     0x4d])

expectedDigest = bytes(
    [0x1f, 0xc7, 0xc4, 0x80, 0x21, 0x41, 0xe2, 0xdb, 0x7a, 0x91, 0x99, 0xc7, 0x47, 0xd8, 0x85, 0xa7,
     0x2d, 0x8f, 0x06, 0x82, 0x62, 0x86, 0x38, 0x43, 0xc9, 0xf4, 0xcb, 0xb1, 0x9d, 0xb3, 0x89, 0x94])

digest = hashFunction.oneShot(message)

if digest != expectedDigest:
    raise Exception("Autotest SHAKE256_256 (hashlib) : erreur vecteur NIST (one-shot)")

hashFunction.init()
hashFunction.update(message[:4])
hashFunction.update(message[4:32])
hashFunction.update(message[32:100])
hashFunction.update(message[100:])
digest = hashFunction.final()

if digest != expectedDigest:
    raise Exception("Autotest SHAKE256_256 (hashlib) : erreur vecteur NIST (init/update/final)")