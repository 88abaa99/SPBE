#  *********************************************************************************************************************
#  Copyright (c) 2022-2023 by THALES
#  All rights reserved.
#  SIX Background Intellectual Property (69333045)
#  ---------------------------------------------------------------------------------------------------------------------
#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
#  following conditions are met:
#  * Redistributions of source code must retain the present copyright notice, this list of conditions and the following
#  disclaimer.
#  * Redistributions in binary form must reproduce the present copyright notice, this list of conditions and the
#  following disclaimer in the documentation and/or other materials provided with the distribution.
#  * Neither the name of THALES nor the names of its contributors may be used to endorse or promote products derived
#  from this software without specific prior written permission.
#  ---------------------------------------------------------------------------------------------------------------------
#  PART OF THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND SHALL REMAIN SUBJECT
#  TO THEIR APPLICABLE TERMS AND CONDITIONS OF LICENCE. ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
#  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
#  SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
#  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#  ---------------------------------------------------------------------------------------------------------------------
#  SCR Python Cryptographic Library (SPCL)
#  File : GCM_AES_autotest.py
#  Classification : OPEN
#  *********************************************************************************************************************

from py_public.BlockCipher.AES import AES128, AES192, AES256
from py_public.ModeCI.GCM import GCM

"""
Partie 1 : Vecteurs de tests du NIST
"""

"""
1.1 IV 12 octets, entete et message vides
"""

key = bytes([0x11, 0x75, 0x4c, 0xd7, 0x2a, 0xec, 0x30, 0x9b, 0xf5, 0x2f, 0x76, 0x87, 0x21, 0x2e, 0x89, 0x57])
IV = bytes([0x3c, 0x81, 0x9d, 0x9a, 0x9b, 0xed, 0x08, 0x76, 0x15, 0x03, 0x0b, 0x65])
header = bytes()
expectedPlaintext = bytes()
expectedCiphertext = bytes()
expectedTag = bytes([0x25, 0x03, 0x27, 0xc6, 0x74, 0xaa, 0xf4, 0x77, 0xae, 0xf2, 0x67, 0x57, 0x48, 0xcf, 0x69, 0x71])

modeCI = GCM(AES128())
ciphertext, tag = modeCI.encryptOneShot(IV, expectedPlaintext, key=key)
plaintext, flagVerif = modeCI.decryptOneShot(IV, expectedCiphertext, tag, key=key)

if (ciphertext != expectedCiphertext) or (tag != expectedTag) or (plaintext != expectedPlaintext) or (flagVerif != True):
    raise Exception("Autotest GCM AES 128 : erreur vecteur NIST (IV 12 octets, entete et message vides)")

"""
1.2 IV 12 octets, entete 45 octets, message 15 octets
"""

key = bytes([0x5c, 0xc9, 0x1a, 0xdc, 0x38, 0x1f, 0x4e, 0xd2, 0xca, 0x75, 0xd7, 0xed, 0x33, 0x57, 0xad, 0xd0])
IV = bytes([0xb6, 0xc6, 0x57, 0xcd, 0xab, 0xb2, 0x85, 0x15, 0x3a, 0x3f, 0x89, 0x3b])
header = bytes([0xa8, 0x65, 0xd8, 0x13, 0xa4, 0x9c, 0xbe, 0x43, 0xa3, 0xbe, 0xde, 0xc3, 0x87, 0xe6, 0xc4, 0x4e, 0xa3,
                0xc6, 0xea, 0xc7, 0x34, 0x02, 0x2e, 0xaa, 0x6e, 0xf9, 0x0a, 0x29, 0x5f, 0xcb, 0x82, 0xc1, 0xba, 0xd8,
                0x41, 0x16, 0x41, 0x27, 0x1c, 0x88, 0x59, 0xa7, 0x3f, 0xbe, 0xbd, 0xe4, 0x70, 0xfc, 0xef, 0x6d, 0xbd,
                0xab, 0x21, 0x2b, 0x2e, 0x9a, 0x21, 0x07, 0xb2, 0x49, 0x0d, 0xfb, 0xee, 0x26, 0x88, 0x55, 0xee, 0xd4,
                0x74, 0x31, 0x93, 0xf3, 0xc5, 0x76, 0xdc, 0xa6, 0x81, 0x6c, 0x5e, 0x0e, 0x83, 0x50, 0xde, 0x24, 0x88,
                0xcf, 0x6a, 0xe3, 0x85, 0xd7])
expectedPlaintext = bytes([0x35, 0x8b, 0xff, 0xed, 0xf8, 0xf6, 0xfa, 0xad, 0x58, 0x34, 0x4c, 0x43, 0x6c])
expectedCiphertext = bytes([0x44, 0x68, 0xc3, 0xbf, 0xa8, 0x89, 0xff, 0xf6, 0xc8, 0x85, 0x7a, 0xb9, 0xe8])
expectedTag = bytes([0x47, 0xbc, 0xc8, 0x25, 0xc9, 0x2f, 0xb7, 0x85, 0x3b, 0xcc, 0x61, 0xb7, 0x41, 0xeb, 0xea, 0x3f])

modeCI = GCM(AES128())
modeCI.setKey(key)
ciphertext, tag = modeCI.encryptOneShot(IV, expectedPlaintext, header)
plaintext, flagVerif = modeCI.decryptOneShot(IV, expectedCiphertext, expectedTag, header)

if (ciphertext != expectedCiphertext) or (tag != expectedTag) or (plaintext != expectedPlaintext) or (flagVerif != True):
    raise Exception("Autotest GCM AES 128 : erreur vecteur NIST (IV 12 octets, entete 45 octets, message 15 octets, oneshot)")

modeCI.setKey(key)
modeCI.encryptInit(IV, header)
ciphertext = modeCI.encryptUpdate(expectedPlaintext[:4])
ciphertext += modeCI.encryptUpdate(expectedPlaintext[4:])
dummy, tag = modeCI.encryptFinal()
modeCI.decryptInit(IV, header)
plaintext = modeCI.decryptUpdate(expectedCiphertext[:4])
plaintext += modeCI.decryptUpdate(expectedCiphertext[4:])
dummy, flagVerif = modeCI.decryptFinal(expectedTag)

if (ciphertext != expectedCiphertext) or (tag != expectedTag) or (plaintext != expectedPlaintext) or (flagVerif != True):
    raise Exception("Autotest GCM AES 128 : erreur vecteur NIST (IV 12 octets, entete 45 octets, message 15 octets, flux)")

"""
1.3 IV 12 octets, entete 48 octets, message 51 octets
"""
key = bytes([0xa5, 0x6f, 0x4d, 0xe6, 0x77, 0x2b, 0x12, 0x42, 0xf1, 0xdf, 0xf3, 0x44, 0xec, 0x9b, 0x51, 0x2d])
IV = bytes([0x94, 0xd2, 0x28, 0x08, 0x7e, 0x82, 0x1e, 0x30, 0x14, 0x09, 0xf3, 0x05])
header = bytes([0x6a, 0x9c, 0x61, 0xdb, 0xbf, 0xaa, 0x20, 0xa1, 0x33, 0x20, 0xa5, 0xf1, 0xde, 0xad, 0x28, 0xbf, 0xbe,
                0x5d, 0xcb, 0xe8, 0x4f, 0xe0, 0xa3, 0x61, 0x7c, 0x34, 0x8b, 0xd7, 0x02, 0xfb, 0xe7, 0x46, 0xf4, 0x39,
                0xdf, 0xca, 0xbd, 0xad, 0x22, 0xac, 0x2f, 0xa6, 0x29, 0x79, 0x3f, 0x54, 0x5b, 0xc6, 0x84, 0x59, 0xf1,
                0xc0, 0x46, 0x24, 0x53, 0xb5, 0xb3, 0x1b, 0x74, 0x7c, 0x3d, 0x29, 0x61, 0x4f, 0x0c, 0xcd, 0x07, 0x45,
                0xfb, 0xaa, 0x4b, 0x20, 0x4d, 0x47, 0xd5, 0xcc, 0x7d, 0xb3, 0x5d, 0x6b, 0xc4, 0x4b, 0xfc, 0xec, 0xdf,
                0xae, 0x91, 0x0f, 0xaa, 0x72])
expectedPlaintext = bytes([0xaf, 0x53, 0x76, 0x82, 0xc4, 0x19, 0xeb, 0x7c, 0xa3, 0xfe, 0xd6, 0x5b, 0xcc, 0x36, 0x4b,
                           0x01, 0xef, 0xc2, 0x45, 0x5f, 0xf6, 0x51, 0x28, 0xde, 0xdc, 0x88, 0xf2, 0x22, 0x46, 0x03,
                           0xef, 0x3d, 0x72, 0x46, 0x62, 0x22, 0x69, 0xa1, 0x2b, 0x26, 0x9b, 0xbf, 0x6a, 0xc9, 0xd2,
                           0xd3, 0xb8, 0x1a, 0xbd, 0x36, 0x6f])
expectedCiphertext = bytes([0x55, 0xb6, 0x05, 0x87, 0xeb, 0x87, 0x91, 0x05, 0xce, 0x4a, 0x36, 0x55, 0x5d, 0x8f, 0x79,
                            0x96, 0x18, 0x23, 0x8b, 0xf1, 0xf7, 0xfd, 0x4d, 0xf6, 0x22, 0x66, 0x2b, 0xd0, 0x7f, 0x45,
                            0x0a, 0x18, 0x37, 0x5a, 0xb7, 0xee, 0xf0, 0x2a, 0x80, 0x36, 0x47, 0x04, 0x28, 0xc4, 0x83,
                            0x4f, 0x88, 0x1b, 0xf0, 0x5c, 0xd4])
expectedTag = bytes([0x8c, 0xbe, 0x48, 0xd4, 0x6b, 0x5c, 0x12, 0x96, 0xb0, 0x5b, 0x2b, 0x6f, 0x4b, 0x24, 0xf7, 0xc6])

modeCI = GCM(AES128())
ciphertext, tag = modeCI.encryptOneShot(IV, expectedPlaintext, header, key=key)
plaintext, flagVerif = modeCI.decryptOneShot(IV, expectedCiphertext, expectedTag, header, key=key)

if (ciphertext != expectedCiphertext) or (tag != expectedTag) or (plaintext != expectedPlaintext) or (flagVerif != True):
    raise Exception("Autotest GCM AES 128 : erreur vecteur NIST (IV 12 octets, entete 48 octets, message 51 octets, oneshot)")

modeCI.setKey(key)
modeCI.encryptInit(IV, header)
ciphertext = modeCI.encryptUpdate(expectedPlaintext[:4])
ciphertext += modeCI.encryptUpdate(expectedPlaintext[4:])
dummy, tag = modeCI.encryptFinal()
modeCI.decryptInit(IV, header)
plaintext = modeCI.decryptUpdate(expectedCiphertext[:4])
plaintext += modeCI.decryptUpdate(expectedCiphertext[4:])
dummy, flagVerif = modeCI.decryptFinal(expectedTag)

if (ciphertext != expectedCiphertext) or (tag != expectedTag) or (plaintext != expectedPlaintext) or (flagVerif != True):
    raise Exception("Autotest GCM AES 128 : erreur vecteur NIST (IV 12 octets, entete 48 octets, message 51 octets, flux)")

"""
1.4 IV 12 octets, entete 90 octets, message 51 octets
"""
key = bytes([0x2c, 0x1f, 0x21, 0xcf, 0x0f, 0x6f, 0xb3, 0x66, 0x19, 0x43, 0x15, 0x5c, 0x3e, 0x3d, 0x84, 0x92])
IV = bytes([0x23, 0xcb, 0x5f, 0xf3, 0x62, 0xe2, 0x24, 0x26, 0x98, 0x4d, 0x19, 0x07])
header = bytes([0x5d, 0x36, 0x24, 0x87, 0x9d, 0x35, 0xe4, 0x68, 0x49, 0x95, 0x3e, 0x45, 0xa3, 0x2a, 0x62, 0x4d, 0x6a,
                0x6c, 0x53, 0x6e, 0xd9, 0x85, 0x7c, 0x61, 0x3b, 0x57, 0x2b, 0x03, 0x33, 0xe7, 0x01, 0x55, 0x7a, 0x71,
                0x3e, 0x3f, 0x01, 0x0e, 0xcd, 0xf9, 0xa6, 0xbd, 0x6c, 0x9e, 0x3e, 0x44, 0xb0, 0x65, 0x20, 0x86, 0x45,
                0xaf, 0xf4, 0xaa, 0xbe, 0xe6, 0x11, 0xb3, 0x91, 0x52, 0x85, 0x14, 0x17, 0x00, 0x84, 0xcc, 0xf5, 0x87,
                0x17, 0x7f, 0x44, 0x88, 0xf3, 0x3c, 0xfb, 0x5e, 0x97, 0x9e, 0x42, 0xb6, 0xe1, 0xcf, 0xc0, 0xa6, 0x02,
                0x38, 0x98, 0x2a, 0x7a, 0xec])
expectedPlaintext = bytes(
    [0x42, 0xf7, 0x58, 0x83, 0x69, 0x86, 0x95, 0x4d, 0xb4, 0x4b, 0xf3, 0x7c, 0x6e, 0xf5, 0xe4, 0xac, 0x0a, 0xda, 0xf3,
     0x8f, 0x27, 0x25, 0x2a, 0x1b, 0x82, 0xd0, 0x2e, 0xa9, 0x49, 0xc8, 0xa1, 0xa2, 0xdb, 0xc0, 0xd6, 0x8b, 0x56, 0x15,
     0xba, 0x7c, 0x12, 0x20, 0xff, 0x65, 0x10, 0xe2, 0x59, 0xf0, 0x66, 0x55, 0xd8])
expectedCiphertext = bytes(
    [0x81, 0x82, 0x4f, 0x0e, 0x0d, 0x52, 0x3d, 0xb3, 0x0d, 0x3d, 0xa3, 0x69, 0xfd, 0xc0, 0xd6, 0x08, 0x94, 0xc7, 0xa0,
     0xa2, 0x06, 0x46, 0xdd, 0x01, 0x50, 0x73, 0xad, 0x27, 0x32, 0xbd, 0x98, 0x9b, 0x14, 0xa2, 0x22, 0xb6, 0xad, 0x57,
     0xaf, 0x43, 0xe1, 0x89, 0x5d, 0xf9, 0xdc, 0xa2, 0xa5, 0x34, 0x4a, 0x62, 0xcc])
expectedTag = bytes([0x57, 0xa3, 0xee, 0x28, 0x13, 0x6e, 0x94, 0xc7, 0x48, 0x38, 0x99, 0x7a, 0xe9, 0x82, 0x3f, 0x3a])

modeCI = GCM(AES128())
modeCI.setKey(key)
ciphertext, tag = modeCI.encryptOneShot(IV, expectedPlaintext, header)
plaintext, flagVerif = modeCI.decryptOneShot(IV, expectedCiphertext, expectedTag, header)

if (ciphertext != expectedCiphertext) or (tag != expectedTag) or (plaintext != expectedPlaintext) or (flagVerif != True):
    raise Exception("Autotest GCM AES 128 : erreur vecteur NIST (IV 12 octets, entete 90 octets, message 51 octets, oneshot)")

modeCI.setKey(key)
modeCI.encryptInit(IV, header)
ciphertext = modeCI.encryptUpdate(expectedPlaintext[:4])
ciphertext += modeCI.encryptUpdate(expectedPlaintext[4:])
dummy, tag = modeCI.encryptFinal()
modeCI.decryptInit(IV, header)
plaintext = modeCI.decryptUpdate(expectedCiphertext[:4])
plaintext += modeCI.decryptUpdate(expectedCiphertext[4:])
dummy, flagVerif = modeCI.decryptFinal(expectedTag)

if (ciphertext != expectedCiphertext) or (tag != expectedTag) or (plaintext != expectedPlaintext) or (flagVerif != True):
    raise Exception("Autotest GCM AES 128 : erreur vecteur NIST (IV 12 octets, entete 90 octets, message 51 octets, flux)")

"""
1.5 IV 1 octets, entete 48 octets, message 16 octets
"""

key = bytes([0x9a, 0x65, 0xc2, 0x16, 0x0b, 0x7c, 0xc5, 0x62, 0x3e, 0x04, 0x40, 0x34, 0x30, 0x99, 0xaf, 0x3c])
IV = bytes([0x9f])
header = bytes([0xd9, 0x84, 0xd8, 0xd9, 0x73, 0x3b, 0x32, 0xff, 0x4b, 0x24, 0xa1, 0x18, 0xe2, 0x76, 0x52, 0xfc, 0x5e,
                0xae, 0x29, 0x9f, 0x96, 0x39, 0x1f, 0xb7, 0x40, 0x15, 0x83, 0xb1, 0xc5, 0xbb, 0xd7, 0xfc, 0x59, 0x6a,
                0xe7, 0x47, 0x65, 0x3a, 0xbf, 0x2d, 0x83, 0x2f, 0x1c, 0x2a, 0x58, 0xee, 0xcd, 0xf4])
expectedPlaintext = bytes([0x50, 0x23, 0xde, 0xe8, 0x3c, 0x0c, 0xd7, 0x6a,
                           0x56, 0x4b, 0xf0, 0x40, 0xe6, 0x7a, 0x3a, 0x9f])
expectedCiphertext = bytes([0x98, 0xcf, 0x22, 0x94, 0x0d, 0x78, 0xd3, 0x90,
                            0x67, 0x80, 0xad, 0x99, 0x03, 0x50, 0x11, 0x6b])
expectedTag = bytes([0xe4, 0x25, 0xfa, 0x2f, 0x0b, 0x86, 0xda, 0xef, 0xa3, 0x50, 0xa1, 0x3e, 0x84, 0x1c, 0xe5, 0xe5])

modeCI = GCM(AES128())
ciphertext, tag = modeCI.encryptOneShot(IV, expectedPlaintext, header, key=key)
plaintext, flagVerif = modeCI.decryptOneShot(IV, expectedCiphertext, expectedTag, header, key=key)

if (ciphertext != expectedCiphertext) or (tag != expectedTag) or (plaintext != expectedPlaintext) or (flagVerif != True):
    raise Exception("Autotest GCM AES 128 : erreur vecteur NIST (IV 1 octets, entete 16 octets, message 51 octets, oneshot)")

modeCI.setKey(key)
modeCI.encryptInit(IV, header)
ciphertext = modeCI.encryptUpdate(expectedPlaintext[:4])
ciphertext += modeCI.encryptUpdate(expectedPlaintext[4:])
dummy, tag = modeCI.encryptFinal()
modeCI.decryptInit(IV, header)
plaintext = modeCI.decryptUpdate(expectedCiphertext[:4])
plaintext += modeCI.decryptUpdate(expectedCiphertext[4:])
dummy, flagVerif = modeCI.decryptFinal(expectedTag)

if (ciphertext != expectedCiphertext) or (tag != expectedTag) or (plaintext != expectedPlaintext) or (flagVerif != True):
    raise Exception("Autotest GCM AES 128 : erreur vecteur NIST (IV 1 octets, entete 16 octets, message 51 octets, flux)")

"""
1.6 IV 128 octets, entete 90 octets, message 51 octets
"""

key = bytes([0xc7, 0xd9, 0x35, 0x8a, 0xf0, 0xfd, 0x73, 0x7b, 0x11, 0x8d, 0xbf, 0x43, 0x47, 0xfd, 0x25, 0x2a])
IV = bytes([0x83, 0xde, 0x9f, 0xa5, 0x22, 0x80, 0x52, 0x2b, 0x55, 0x29, 0x0e, 0xbe, 0x3b, 0x06, 0x72, 0x86, 0xd8, 0x76,
            0x90, 0x56, 0x01, 0x79, 0x55, 0x41, 0x53, 0xcb, 0x33, 0x41, 0xa0, 0x4e, 0x15, 0xc5, 0xf3, 0x53, 0x90, 0x60,
            0x2f, 0xa0, 0x7e, 0x5b, 0x5f, 0x16, 0xdc, 0x38, 0xcf, 0x08, 0x2b, 0x11, 0xad, 0x6d, 0xd3, 0xfa, 0xb8, 0x55,
            0x2d, 0x2b, 0xf8, 0xd9, 0xc8, 0x98, 0x1b, 0xbf, 0xc5, 0xf3, 0xb5, 0x7e, 0x5e, 0x30, 0x66, 0xe3, 0xdf, 0x23,
            0xf0, 0x78, 0xfa, 0x25, 0xbc, 0xe6, 0x3d, 0x3d, 0x6f, 0x86, 0xce, 0x9f, 0xbc, 0x2c, 0x67, 0x96, 0x55, 0xb9,
            0x58, 0xb0, 0x9a, 0x99, 0x13, 0x92, 0xeb, 0x93, 0xb4, 0x53, 0xba, 0x6e, 0x7b, 0xf8, 0x24, 0x2f, 0x8f, 0x61,
            0x32, 0x9e, 0x3a, 0xfe, 0x75, 0xd0, 0xf8, 0x53, 0x6a, 0xa7, 0xe5, 0x07, 0xd7, 0x58, 0x91, 0xe5, 0x40, 0xfb,
            0x1d, 0x7e])
header = bytes([0x5d, 0x2b, 0x9a, 0x4f, 0x99, 0x4f, 0xfa, 0xa0, 0x30, 0x00, 0x14, 0x99, 0x56, 0xc8, 0x93, 0x2e, 0x85,
                0xb1, 0xa1, 0x67, 0x29, 0x45, 0x14, 0xe3, 0x88, 0xb7, 0x3b, 0x10, 0x80, 0x8f, 0x50, 0x9e, 0xa7, 0x3c,
                0x07, 0x5e, 0xcb, 0xf4, 0x3c, 0xec, 0xfe, 0xc1, 0x3c, 0x20, 0x2a, 0xfe, 0xd6, 0x21, 0x10, 0xda, 0xbf,
                0x80, 0x26, 0xd2, 0x37, 0xf4, 0xe7, 0x65, 0x85, 0x3b, 0xc0, 0x78, 0xf3, 0xaf, 0xe0, 0x81, 0xd0, 0xa1,
                0xf8, 0xd8, 0xf7, 0x55, 0x6b, 0x8e, 0x42, 0xac, 0xc3, 0xcc, 0xe8, 0x88, 0x26, 0x21, 0x85, 0x04, 0x8d,
                0x67, 0xc5, 0x5b, 0x2d, 0xf1])
expectedPlaintext = bytes([0x42, 0x2f, 0x46, 0x22, 0x3f, 0xdd, 0xff, 0x25, 0xfc, 0x7a, 0x6a, 0x89, 0x7d, 0x20, 0xdc,
                           0x8a, 0xf6, 0xcc, 0x8a, 0x37, 0x82, 0x8c, 0x90, 0xbd, 0x95, 0xfa, 0x9b, 0x94, 0x3f, 0x46,
                           0x0e, 0xb0, 0xa2, 0x6f, 0x29, 0xff, 0xc4, 0x83, 0x59, 0x2e, 0xfb, 0x64, 0x83, 0x57, 0x74,
                           0x16, 0x0a, 0x1b, 0xb5, 0xc0, 0xcd])
expectedCiphertext = bytes([0x86, 0xeb, 0xa4, 0x91, 0x15, 0x78, 0xac, 0x72, 0xac, 0x30, 0xc2, 0x5f, 0xe4, 0x24, 0xda,
                            0x9a, 0xb6, 0x25, 0xf2, 0x9b, 0x5c, 0x00, 0xe3, 0x6d, 0x2c, 0x24, 0xa2, 0x73, 0x3d, 0xc4,
                            0x01, 0x23, 0xdc, 0x57, 0xa8, 0xc9, 0xf1, 0x7a, 0x24, 0xa2, 0x6c, 0x09, 0xc7, 0x3a, 0xd4,
                            0xef, 0xbc, 0xba, 0x3b, 0xab, 0x5b])
expectedTag = bytes([0x49, 0x23, 0x05, 0x19, 0x03, 0x44, 0x61, 0x8c, 0xab, 0x8b, 0x40, 0xf0, 0x06, 0xa5, 0x71, 0x86])

modeCI = GCM(AES128())
modeCI.setKey(key)
ciphertext, tag = modeCI.encryptOneShot(IV, expectedPlaintext, header)
plaintext, flagVerif = modeCI.decryptOneShot(IV, expectedCiphertext, expectedTag, header)

if (ciphertext != expectedCiphertext) or (tag != expectedTag) or (plaintext != expectedPlaintext) or (flagVerif != True):
    raise Exception("Autotest GCM AES 128 : erreur vecteur NIST (IV 1 octets, entete 16 octets, message 51 octets, oneshot)")

modeCI.setKey(key)
modeCI.encryptInit(IV, header)
ciphertext = modeCI.encryptUpdate(expectedPlaintext[:4])
ciphertext += modeCI.encryptUpdate(expectedPlaintext[4:])
dummy, tag = modeCI.encryptFinal()
modeCI.decryptInit(IV, header)
plaintext = modeCI.decryptUpdate(expectedCiphertext[:4])
plaintext += modeCI.decryptUpdate(expectedCiphertext[4:])
dummy, flagVerif = modeCI.decryptFinal(expectedTag)

if (ciphertext != expectedCiphertext) or (tag != expectedTag) or (plaintext != expectedPlaintext) or (flagVerif != True):
    raise Exception("Autotest GCM AES 128 : erreur vecteur NIST (IV 1 octets, entete 16 octets, message 51 octets, flux)")

"""
1.7 IV 1024 octets, entete 90 octets, message 51 octets (AES192)
"""

key = bytes([0xdd, 0xf3, 0x80, 0x33, 0xab, 0x99, 0x7d, 0xa0, 0x81, 0x0c, 0xdf, 0x7f, 0x08, 0xc9, 0x98, 0xe0, 0xba, 0x7f,
             0xaf, 0x10, 0x75, 0x9e, 0xc6, 0x5f])
IV = bytes([0x8a, 0xba, 0x85, 0x50, 0x03, 0x62, 0x66, 0x53, 0x60, 0x02, 0xdb, 0x7f, 0x34, 0xd8, 0xd2, 0xf2, 0x92, 0x3c,
            0x6f, 0x9f, 0x80, 0x33, 0x83, 0x94, 0x54, 0xce, 0x97, 0xb2, 0xab, 0x9c, 0xdc, 0x98, 0x7f, 0xd0, 0x70, 0xc3,
            0xb0, 0x04, 0xe1, 0xaa, 0x95, 0x90, 0xde, 0xd7, 0x11, 0x67, 0x3d, 0x0c, 0x83, 0x05, 0x0e, 0xb7, 0xe7, 0xfd,
            0xd9, 0xa9, 0xd7, 0x4b, 0x84, 0xa5, 0xbc, 0x20, 0x0c, 0xb8, 0x5d, 0x22, 0xdb, 0x65, 0x8f, 0x5f, 0x47, 0x10,
            0x1c, 0xfb, 0x2c, 0x6a, 0x3d, 0xb5, 0x82, 0x2d, 0x83, 0x29, 0x5a, 0x31, 0xed, 0x59, 0xad, 0x27, 0x2c, 0x36,
            0xab, 0x67, 0x2a, 0x0d, 0xdb, 0x60, 0x60, 0x84, 0x04, 0x98, 0x79, 0x7a, 0xde, 0x52, 0x04, 0xea, 0x41, 0x6d,
            0x40, 0xd0, 0xeb, 0x36, 0x49, 0x7f, 0x94, 0x51, 0xf2, 0xb6, 0x99, 0x70, 0xd8, 0x98, 0xfc, 0x89, 0xf3, 0x3d,
            0xdc, 0x57])
header = bytes([0xd8, 0x33, 0xe1, 0xb4, 0x72, 0xd8, 0x72, 0x2b, 0x4d, 0x1b, 0xca, 0xb0, 0x7b, 0x1c, 0xa3, 0x1e, 0xac,
                0x90, 0xf8, 0x6a, 0xcc, 0x0e, 0x8f, 0x18, 0x42, 0x8c, 0xcf, 0x9e, 0x6a, 0xed, 0x62, 0xdc, 0xbd, 0x22,
                0x2f, 0x5e, 0xec, 0xbc, 0xe8, 0x6b, 0x2f, 0x4d, 0xdf, 0xa1, 0xa0, 0x6c, 0x3f, 0x73, 0xa3, 0x01, 0x57,
                0x12, 0xa3, 0x39, 0x3b, 0x31, 0xbf, 0xec, 0x27, 0xce, 0x60, 0x66, 0x57, 0xcc, 0x9e, 0x08, 0x20, 0x20,
                0xeb, 0x35, 0xbe, 0xb7, 0x95, 0x86, 0x37, 0xa9, 0xeb, 0x56, 0xc2, 0x23, 0xfc, 0x31, 0x87, 0x29, 0x3c,
                0xe9, 0xd3, 0x32, 0xbd, 0x67])
expectedPlaintext = bytes([0x3d, 0x14, 0xcb, 0xc7, 0xe8, 0x81, 0x10, 0x91, 0x6b, 0xbf, 0x26, 0xfe, 0xc6, 0x3e, 0x48,
                           0xdf, 0x0f, 0x20, 0x6f, 0x77, 0xeb, 0x57, 0x1a, 0xa9, 0x17, 0x38, 0x4d, 0x92, 0x32, 0x1b,
                           0xd0, 0x72, 0x13, 0x57, 0xd8, 0xef, 0xa6, 0x11, 0x68, 0xe5, 0x54, 0x07, 0xaf, 0xe2, 0x9e,
                           0xa6, 0xb5, 0x44, 0x89, 0x13, 0xe0])
expectedCiphertext = bytes([0xe2, 0x33, 0x1d, 0x43, 0xa5, 0x98, 0x71, 0x48, 0xb9, 0xaa, 0xee, 0xa7, 0xc4, 0xf8, 0xa1,
                            0x1f, 0x83, 0xf8, 0x64, 0x07, 0x3d, 0x9d, 0xd7, 0x9f, 0x03, 0x40, 0x79, 0x64, 0x8d, 0x62,
                            0x1e, 0xfb, 0x76, 0xad, 0x3e, 0xca, 0xa5, 0x2f, 0x44, 0x77, 0x6a, 0xba, 0xb2, 0xe4, 0xa7,
                            0x37, 0xe6, 0x2f, 0xfb, 0x7b, 0xf1])
expectedTag = bytes([0xaf, 0x5d, 0x2f, 0x8b, 0xf2, 0x74, 0xf2, 0x87, 0xeb, 0xf6, 0x3b, 0xb6, 0xff, 0xbf, 0x03, 0x77])

modeCI = GCM(AES192())
ciphertext, tag = modeCI.encryptOneShot(IV, expectedPlaintext, header, key=key)
plaintext, flagVerif = modeCI.decryptOneShot(IV, expectedCiphertext, expectedTag, header, key=key)

if (ciphertext != expectedCiphertext) or (tag != expectedTag) or (plaintext != expectedPlaintext) or (flagVerif != True):
    raise Exception("Autotest GCM AES 128 : erreur vecteur NIST (IV 1 octets, entete 16 octets, message 51 octets, oneshot)")

modeCI.setKey(key)
modeCI.encryptInit(IV, header)
ciphertext = modeCI.encryptUpdate(expectedPlaintext[:4])
ciphertext += modeCI.encryptUpdate(expectedPlaintext[4:])
dummy, tag = modeCI.encryptFinal()
modeCI.decryptInit(IV, header)
plaintext = modeCI.decryptUpdate(expectedCiphertext[:4])
plaintext += modeCI.decryptUpdate(expectedCiphertext[4:])
dummy, flagVerif = modeCI.decryptFinal(expectedTag)

if (ciphertext != expectedCiphertext) or (tag != expectedTag) or (plaintext != expectedPlaintext) or (flagVerif != True):
    raise Exception("Autotest GCM AES 128 : erreur vecteur NIST (IV 1 octets, entete 16 octets, message 51 octets, flux)")

"""
1.8 IV 1024 octets, entete 90 octets, message 51 octets (AES256)
"""

key = bytes([0x65, 0xb7, 0x17, 0x1b, 0x55, 0xb2, 0x2e, 0xdd, 0x71, 0x1a, 0x07, 0x6f, 0x2e, 0xb6, 0xa1, 0x25, 0xe8, 0x73,
             0x99, 0x3e, 0x8d, 0x54, 0x56, 0x4c, 0xd6, 0x2d, 0x03, 0xc6, 0x65, 0xcd, 0x63, 0x74])
IV = bytes([0x54, 0xd1, 0x18, 0xd3, 0x2a, 0x56, 0x13, 0x8f, 0x04, 0x21, 0x26, 0x84, 0xb1, 0xe4, 0x7c, 0x5d, 0x68, 0x08,
            0xc1, 0x28, 0x99, 0x6e, 0x1d, 0x6e, 0xbf, 0x73, 0x9e, 0xf9, 0xff, 0x13, 0x8a, 0xac, 0x11, 0x81, 0xfc, 0xde,
            0x82, 0x0a, 0x5f, 0x68, 0x74, 0x9e, 0x1f, 0xed, 0x79, 0x13, 0x14, 0xc7, 0x3c, 0x54, 0x16, 0x9a, 0xee, 0x55,
            0x56, 0xbf, 0x20, 0x69, 0x98, 0xd9, 0x54, 0x32, 0x71, 0x9f, 0xc9, 0xff, 0xe2, 0x2f, 0xbb, 0xc4, 0x92, 0x5f,
            0x32, 0x77, 0x4d, 0x31, 0xe0, 0x75, 0x39, 0x3c, 0x09, 0x07, 0xe2, 0x7c, 0x3f, 0x40, 0xda, 0x02, 0xc4, 0x24,
            0xb4, 0x02, 0xef, 0xf5, 0x96, 0xf6, 0x30, 0x0b, 0x88, 0x1b, 0x8f, 0x56, 0x1d, 0x5a, 0xe4, 0x53, 0x5a, 0x1f,
            0xa9, 0xd4, 0xba, 0xfe, 0x86, 0xdd, 0x67, 0x51, 0xb0, 0xda, 0x24, 0x5a, 0xe7, 0xb7, 0x4d, 0xdc, 0xc3, 0xf5,
            0x03, 0x3c])
header = bytes([0x4a, 0x3b, 0x04, 0xde, 0xcb, 0xec, 0x0a, 0x54, 0x96, 0x66, 0xe8, 0x70, 0x36, 0xe7, 0x84, 0x33, 0xb8,
                0x96, 0x27, 0x07, 0x92, 0xe7, 0x93, 0x28, 0x10, 0xc3, 0x8e, 0xb0, 0x63, 0x13, 0x9a, 0xde, 0x6a, 0x4b,
                0xef, 0xd4, 0xdf, 0xdb, 0x38, 0xd5, 0x3c, 0xdb, 0x95, 0xac, 0xcb, 0xde, 0xe7, 0xad, 0x54, 0x78, 0xc3,
                0xbc, 0x55, 0xa2, 0x12, 0x26, 0xc2, 0xb0, 0xfa, 0x79, 0xfe, 0x7c, 0x30, 0x26, 0x2f, 0xa5, 0x38, 0x3d,
                0xe3, 0xd3, 0xb4, 0x5e, 0x95, 0x1d, 0x7e, 0xf9, 0x55, 0xf3, 0xa1, 0x8b, 0x96, 0x89, 0x78, 0x38, 0x98,
                0xbe, 0xdb, 0x66, 0xf0, 0xb8])
expectedPlaintext = bytes([0x05, 0x21, 0xe4, 0x1d, 0x82, 0x7d, 0x61, 0x04, 0xec, 0xda, 0xb1, 0xf8, 0xe7, 0xfb, 0x70,
                           0xcd, 0x8a, 0xbc, 0xa8, 0x75, 0x00, 0xec, 0xd3, 0x6e, 0x65, 0x90, 0x61, 0x94, 0x32, 0x7b,
                           0x1b, 0x61, 0x01, 0x4f, 0xd3, 0x10, 0xf4, 0xe1, 0xbf, 0x7d, 0x5b, 0xf3, 0x56, 0xa5, 0xd7,
                           0x31, 0xc0, 0xd0, 0xd4, 0x7c, 0x7e])
expectedCiphertext = bytes([0x2e, 0xcf, 0x7a, 0x3a, 0x35, 0xab, 0xb5, 0x0d, 0x21, 0x25, 0x88, 0xc2, 0xef, 0x50, 0x88,
                            0x02, 0x12, 0xb5, 0x3c, 0x05, 0x27, 0x38, 0x76, 0x7c, 0x9e, 0xa2, 0x15, 0x70, 0x92, 0x08,
                            0xaf, 0xae, 0x6e, 0x94, 0xac, 0xd6, 0x89, 0x80, 0x20, 0x7b, 0xf6, 0x33, 0x82, 0x49, 0x5b,
                            0xe1, 0xac, 0xde, 0x78, 0x4b, 0x92])
expectedTag = bytes([0x49, 0x56, 0x3e, 0x12, 0x79, 0x7e, 0xef, 0xbe, 0xe2, 0xfd, 0x75, 0xa1, 0xe8, 0x44, 0x86, 0x9b])

modeCI = GCM(AES256())
modeCI.setKey(key)
ciphertext, tag = modeCI.encryptOneShot(IV, expectedPlaintext, header)
plaintext, flagVerif = modeCI.decryptOneShot(IV, expectedCiphertext, expectedTag, header)

if (ciphertext != expectedCiphertext) or (tag != expectedTag) or (plaintext != expectedPlaintext) or (flagVerif != True):
    raise Exception("Autotest GCM AES 128 : erreur vecteur NIST (IV 1 octets, entete 16 octets, message 51 octets, oneshot)")

modeCI.setKey(key)
modeCI.encryptInit(IV, header)
ciphertext = modeCI.encryptUpdate(expectedPlaintext[:4])
ciphertext += modeCI.encryptUpdate(expectedPlaintext[4:])
dummy, tag = modeCI.encryptFinal()
modeCI.decryptInit(IV, header)
plaintext = modeCI.decryptUpdate(expectedCiphertext[:4])
plaintext += modeCI.decryptUpdate(expectedCiphertext[4:])
dummy, flagVerif = modeCI.decryptFinal(expectedTag)

if (ciphertext != expectedCiphertext) or (tag != expectedTag) or (plaintext != expectedPlaintext) or (flagVerif != True):
    raise Exception("Autotest GCM AES 128 : erreur vecteur NIST (IV 1 octets, entete 16 octets, message 51 octets, flux)")